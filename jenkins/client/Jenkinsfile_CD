@Library("jenkins-library") _

pipeline {
    agent {
        docker {
            image 'node:16-alpine'
        }
    }
    // *** Documentation ***
    // name: reactivities-client-app-cd
    // descrition: 'Continuous Delivery for the Reactivities client application.'
    // discardOldBuilds: strategy: Log Rotation, maxBuildsToKeep: 10
    // doNotAllowConcurrentBuilds: true
    // server env vars: ARTIFACTORY_CREDS_ID, ARTIFACTORY_CREDS_ID
    parameters {
        choice(
            name: 'DEPLOY_ENV',
            choices: ['dev','qa','prod'],
            description: 'Environment for which to deploy.',
        )
        choice(
            name: 'RUN_PACKAGE_DOWNLOAD',
            choices: ['Yes','No'],
            description: 'Whether to download the artifact(s).',
        )
        choice(
            name: 'RUN_PACKAGE_VERIFY',
            choices: ['Yes','No'],
            description: 'Whether to verify integrity of the artifact(s).',
        )
        choice(
            name: 'RUN_DEPLOYMENT',
            choices: ['Yes','No'],
            description: 'Whether to perform the deployment',
        )
        string(
            name: 'CI_BUILD_NUMBER',
            description: 'Version of the package to deploy.  Same as the prefix + CI build number (e.g. "1.0.XXX").'
        )
    }
    environment {
        APP_NAME = 'reactivities'
        // ensure if 'prod' is the intended deployment environment, use the 'qa' build
        BUILD_ENV = "${ DEPLOY_ENV ==  'prod' ? 'qa' : DEPLOY_ENV }"
        PACKAGE_NAME = "reactivities-client-${BUILD_ENV}-${CI_BUILD_NUMBER}.tar.gz"
        PACKAGE_REPO_PATH = "reactivities/client/${BUILD_ENV}/${PACKAGE_NAME}"
    }
    stages {
        stage('Download Artifact') {
            when {
                expression { RUN_PACKAGE_DOWNLOAD == 'Yes' && CI_BUILD_NUMBER != '' }
            }
            steps {
                downloadArtifact([
                    ARTIFACTORY_CREDS_ID: "${ARTIFACTORY_CREDS_ID}",
                    ARTIFACTORY_SERVER: "${ARTIFACTORY_SERVER}",
                    PACKAGE_REPO_PATH: "${PACKAGE_REPO_PATH}",
                    PACKAGE_NAME: "${PACKAGE_NAME}"
                ])
            }
        }
        stage('Verify Artifact') {
            when {
                expression { RUN_PACKAGE_DOWNLOAD == 'Yes' && CI_BUILD_NUMBER != '' && RUN_PACKAGE_VERIFY == 'Yes'}
            }
            steps {
                verifyArtifact([
                    ARTIFACTORY_CREDS_ID: "${ARTIFACTORY_CREDS_ID}",
                    ARTIFACTORY_SERVER: "${ARTIFACTORY_SERVER}",
                    PACKAGE_REPO_PATH: "${PACKAGE_REPO_PATH}",
                    PACKAGE_NAME: "${PACKAGE_NAME}"
                ])
            }
        }
        stage('Deploy') {
            when {
                expression { RUN_PACKAGE_DOWNLOAD == 'Yes' && RUN_DEPLOYMENT == 'Yes' }
            }
            steps {
                sh "echo TODO: Deploy the ${BUILD_ENV} build to ${DEPLOY_ENV}."
            }
        }
    }
}
