pipeline {
    agent any
    environment {
        CI = 'true'
        PACKAGE_NAME = 'reactivities_client'
    }
    stages {
        stage('Build and Unit Test') {
            when {
                expression { RUN_BUILD == 'Yes' }
            }
            agent {
                docker {
                    image 'node:lts-buster-slim'
                }
            }
            steps {
                sh "echo ${env.NODE_NAME}"
                sh '''
                    cd ./src/client-app
                    npm install
                    npm run test
                '''
            }
        }
        stage('Sonar Scanner') {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'
                }
            }
            steps {
                withSonarQubeEnv('SonarQubeScanner') {
                    sh '''
                        cd ./src/client-app
                        sonar-scanner \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.projectKey=Reactivities-Client-App \
                            -Dsonar.projectName=Reactivities-Client-App
                    '''
                }
            }
        }
        stage("Quality Gate") {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Package') {
            when {
                expression { RUN_PACKAGE == 'Yes' }
            }
            agent {
                docker {
                    image 'node:lts-buster-slim'
                }
            }
            steps {
                echo "TODO: package and upload $PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER"
                input message="Done?"
                sh '''
                    ls
                '''
            }
        }
    }
}
