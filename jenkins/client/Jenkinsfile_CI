@Library("jenkins-library") _

pipeline {
    agent any
    // descrition: 'Continuous Integration (Build) for the Reactivities client application.'
    // discardOldBuilds: strategy: Log Rotation, maxBuildsToKeep: 10
    // doNotAllowConcurrentBuilds: true
    // properties([
    //     parameters([
    //         choice(
    //             name: 'BUILD_ENV',
    //             choices: ['dev','qa'],
    //             description: 'Environment for which to build and package the solution.',
    //         ),
    //         choice(
    //             name: 'RUN_BUILD',
    //             choices: ['Yes','No'],
    //             description: 'Whether to perform the build',
    //         ),
    //         choice(
    //             name: 'RUN_SONAR',
    //             choices: ['Yes','No'],
    //             description: 'Whether to run SonarQube Scanner and Quality Gate stages.',
    //         ),
    //         choice(
    //             name: 'RUN_PACKAGE',
    //             choices: ['Yes','No'],
    //             description: 'Whether to package the artifact(s).',
    //         )
    //     ])
    // ])
    environment {
        CI = 'false' // TODO: set to true, false for now -- else builds fail due to client build warnings
        SONAR_PROJECT_KEY = 'Reactivities-Client-App'
        SONAR_PROJECT_BASE_PATH = './src/client-app'
        PACKAGE_NAME = 'reactivities_client'
        PACKAGE_REPO_PATH = 'libs-release-local'
        BUILD_PREFIX = '1.0'
        BUILDS_PATH = '/builds'
        SONAR_SERVER_ID = 'SonarQubeScanner'
    }
    stages {
        stage('Build and Unit Test') {
            when {
                expression { RUN_BUILD == 'Yes' }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh "echo ${env.NODE_NAME}"
                sh '''
                    cd ./src/client-app
                    npm install
                    npm run test
                '''
            }
        }
        stage('Sonar Scanner') {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'
                }
            }
            steps {
                sonarScan([
                    SONAR_SERVER_ID: "${SONAR_SERVER_ID}",
                    SONAR_PROJECT_BASE_PATH: "${SONAR_PROJECT_BASE_PATH}",
                    SONAR_PROJECT_KEY: "${SONAR_PROJECT_KEY}"
                ])
            }
        }
        stage("Quality Gate") {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            steps {
                awaitQualityGate()
            }
        }
        stage('Package') {
            when {
                expression { RUN_PACKAGE == 'Yes' }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh '''
                    mkdir -p $BUILDS_PATH
                    cd ./src/client-app && npm run build && cd ../..
                    cd ./src/API/wwwroot/ && tar -czvf $BUILDS_PATH/$PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER.zip .
                '''
                archiveArtifact([
                    ARTIFACTORY_CREDS_ID: "${ARTIFACTORY_CREDS_ID}",
                    ARTIFACTORY_SERVER: "${ARTIFACTORY_SERVER}",
                    PACKAGE_PATH: "$BUILDS_PATH/${PACKAGE_NAME}-${BUILD_ENV}-${BUILD_NUMBER}.zip",
                    PACKAGE_NAME: "${PACKAGE_NAME}",
                    BUILD_ENV: "${BUILD_ENV}",
                    BUILD_PREFIX: "${BUILD_PREFIX}",
                    BUILD_NUMBER: "${BUILD_NUMBER}",
                    REPO: "${PACKAGE_REPO_PATH}"
                ])
                cleanDirectory([ DIRECTORY: "${BUILDS_PATH}" ])
            }
        }
    }
}
