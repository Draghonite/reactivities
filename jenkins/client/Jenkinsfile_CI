@Library("jenkins-library") _

pipeline {
    agent any
    environment {
        CI = 'false' // TODO: set to true, false for now -- else builds fail due to client build warnings
        PACKAGE_NAME = 'reactivities_client'
        // TODO: move to server-level environment config instead
        // ARTIFACTORY_SERVER = 'http://172.20.0.5:8081/artifactory'
        BUILD_PREFIX = '1.0'
    }
    stages {
        stage('Build and Unit Test') {
            when {
                expression { RUN_BUILD == 'Yes' }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh "echo ${env.NODE_NAME}"
                sh '''
                    cd ./src/client-app
                    npm install
                    npm run test
                '''
            }
        }
        stage('Sonar Scanner') {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'
                }
            }
            steps {
                withSonarQubeEnv('SonarQubeScanner') {
                    sh '''
                        cd ./src/client-app
                        // TODO: refactor into a reusable library function and inject into the pipeline
                        sonar-scanner \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.projectKey=Reactivities-Client-App \
                            -Dsonar.projectName=Reactivities-Client-App
                    '''
                }
            }
        }
        stage("Quality Gate") {
            when {
                expression { RUN_SONAR == 'Yes' }
            }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Package') {
            when {
                expression { RUN_PACKAGE == 'Yes' }
            }
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                sh '''
                    cd ./src/client-app && npm run build
                    tar -czvf ../$PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER.zip ../API/wwwroot/
                '''
                // TODO: refactor add and run curl into a reusable library function and inject into the pipeline and inject creds in that function
                // withCredentials([usernameColonPassword(credentialsId: 'ARTIFACTORY-USER', variable: 'ARTIFACTORY_USER_PASS')]) {
                //     sh '''
                //         curl -i -u "$ARTIFACTORY_USER_PASS" -T ./src/API/wwwroot/$PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER.zip "$ARTIFACTORY_SERVER/libs-release-local/$PACKAGE_NAME-$BUILD_ENV/$PACKAGE_NAME-$BUILD_ENV-$BUILD_PREFIX.$BUILD_NUMBER.zip"
                //     '''
                // }
                pushArtifactory(ARTIFACTORY_CREDS_ID: 'ARTIFACTORY-USER',
                    ARTIFACTORY_SERVER: $ARTIFACTORY_SERVER, // TODO: see if can be removed and read directly within library but be set here (plus be set in global/system env)
                    PACKAGE_PATH: './src/API/wwwroot/$PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER.zip',
                    PACKAGE_NAME: $PACKAGE_NAME, // TODO: can be read from environment?
                    BUILD_ENV: $BUILD_ENV, // TODO: can be optional (read from environment w/o explicitly passing it in?)
                    BUILD_NUMBER: $BUILD_NUMBER // TODO: can be optional?
                )
                sh '''
                    rm ./src/API/wwwroot/$PACKAGE_NAME-$BUILD_ENV-$BUILD_NUMBER.zip
                '''
            }
        }
    }
}
